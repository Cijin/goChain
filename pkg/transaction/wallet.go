package transaction

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/sha256"
	"log"

	"github.com/Cijin/gochain/pkg/utils"
	"golang.org/x/crypto/ripemd160"
)

const version = byte(0x00)
const ChecksumLen = 4

type Wallet struct {
	PrivateKey ecdsa.PrivateKey
	PublicKey  []byte
}

type Wallets struct {
	Wallets map[string]*Wallet
}

func NewWallet() *Wallet {
	private, public := generateKey()
	wallet := Wallet{private, public}

	return &wallet
}

/*
 * get public key hash
 * get checksum from version, public key hash
 * generate adress by encoding checksum, public key hash, version
 */
func (w Wallet) GetAddress() []byte {
	pubKeyHash := HashPubKey(w.PublicKey)

	versionedPayload := append([]byte{version}, pubKeyHash...)
	checksum := checksum(versionedPayload)

	fullPayload := append(versionedPayload, checksum...)
	address := utils.Base58Encode(fullPayload)

	return address
}

func HashPubKey(pubKey []byte) []byte {
	publicSHA256 := sha256.Sum256(pubKey)

	RIPEMD160HASHER := ripemd160.New()
	_, err := RIPEMD160HASHER.Write(publicSHA256[:])
	if err != nil {
		log.Panic(err)
	}

	publicRIPEMD160 := RIPEMD160HASHER.Sum(nil)

	return publicRIPEMD160
}

/*
 * Validating Address
 *	Address is a Base58 Encoded []byte which I will refer to as payload
 *	The payload is composed of three parts:
 *		1. Version: the first element of the payload
 *		2. Public Key Hash: the result of double hasing the ecdsa public key
 *		3. Checksum: Which is generated using 1, 2
 *
 * To validate the address all we need to check is if the decoded addresses
 * checksum matches the checksum generated by seperating it's version and
 * public key hash. i.e. compare actual checksum with target checksum
 */
func ValidateAddress(address string) bool {
	pubKeyHash := utils.Base58Decode([]byte(address))
	pubKeyHashLength := len(pubKeyHash) - ChecksumLen
	actualChecksum := pubKeyHash[pubKeyHashLength:]

	// generating target checksum
	version := pubKeyHash[0]
	pubKeyHash = pubKeyHash[1:pubKeyHashLength]
	targetChecksum := checksum(append([]byte{version}, pubKeyHash...))

	return bytes.Compare(actualChecksum, targetChecksum) == 0

}

/*
 * Hash payload twice and return hash of checksum length
 */
func checksum(payload []byte) []byte {
	firstSHA := sha256.Sum256(payload)
	secondSHA := sha256.Sum256(firstSHA[:])

	return secondSHA[:ChecksumLen]
}

func generateKey() (ecdsa.PrivateKey, []byte) {
	curve := elliptic.P256()
	privateKey, err := ecdsa.GenerateKey(curve, rand.Reader)
	if err != nil {
		log.Panic(err)
	}

	publicKey := append(privateKey.PublicKey.X.Bytes(), privateKey.PublicKey.Y.Bytes()...)

	return *privateKey, publicKey
}
